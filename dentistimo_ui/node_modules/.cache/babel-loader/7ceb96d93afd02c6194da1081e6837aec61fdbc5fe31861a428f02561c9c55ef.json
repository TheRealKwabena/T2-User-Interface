{"ast":null,"code":"// Create a client instance\nimport Paho from 'paho-mqtt';\nconst client = new Paho.MQTT.Client('45bb56160a76417fb2b1bddd91a534ca.s2.eu.hivemq.cloud', Number(8884), \"/ws\", \"clientId\");\n\n// set callback handlers\n//client.onConnectionLost = onConnectionLost;\n//client.onMessageArrived = onMessageArrived;\n\n// connect the client\nexport const connect = client.connect({\n  onSuccess: onConnect\n});\n\n// called when the client connects\nexport function onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"World\");\n  const message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"World\";\n  client.send(message);\n}\n\n// called when the client loses its connection\nexport function onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n  }\n}\n\n// called when a message arrives\nexport function onMessageArrived(message) {\n  console.log(\"onMessageArrived:\" + message.payloadString);\n}","map":{"version":3,"names":["Paho","client","MQTT","Client","Number","connect","onSuccess","onConnect","console","log","subscribe","message","Message","destinationName","send","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString"],"sources":["C:/Users/adity/Desktop/SEM'24/DisSystems/T2-UserInterface/dentistimo_ui/src/Infrastructure/PMQTTController.js"],"sourcesContent":["// Create a client instance\r\nimport Paho from 'paho-mqtt';\r\n\r\nconst client = new Paho.MQTT.Client('45bb56160a76417fb2b1bddd91a534ca.s2.eu.hivemq.cloud', Number(8884), \"/ws\", \"clientId\");\r\n \r\n// set callback handlers\r\n//client.onConnectionLost = onConnectionLost;\r\n//client.onMessageArrived = onMessageArrived;\r\n \r\n// connect the client\r\nexport const connect = client.connect({onSuccess:onConnect});\r\n \r\n// called when the client connects\r\nexport function onConnect() {\r\n  // Once a connection has been made, make a subscription and send a message.\r\n  console.log(\"onConnect\");\r\n  client.subscribe(\"World\");\r\n  const message = new Paho.MQTT.Message(\"Hello\");\r\n  message.destinationName = \"World\";\r\n  client.send(message);\r\n}\r\n \r\n// called when the client loses its connection\r\nexport function onConnectionLost(responseObject) {\r\n  if (responseObject.errorCode !== 0) {\r\n    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\r\n  }\r\n}\r\n \r\n// called when a message arrives\r\nexport function onMessageArrived(message) {\r\n  console.log(\"onMessageArrived:\"+message.payloadString);\r\n}"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,WAAW;AAE5B,MAAMC,MAAM,GAAG,IAAID,IAAI,CAACE,IAAI,CAACC,MAAM,CAAC,qDAAqD,EAAEC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC;;AAE3H;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,OAAO,GAAGJ,MAAM,CAACI,OAAO,CAAC;EAACC,SAAS,EAACC;AAAS,CAAC,CAAC;;AAE5D;AACA,OAAO,SAASA,SAAS,GAAG;EAC1B;EACAC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxBR,MAAM,CAACS,SAAS,CAAC,OAAO,CAAC;EACzB,MAAMC,OAAO,GAAG,IAAIX,IAAI,CAACE,IAAI,CAACU,OAAO,CAAC,OAAO,CAAC;EAC9CD,OAAO,CAACE,eAAe,GAAG,OAAO;EACjCZ,MAAM,CAACa,IAAI,CAACH,OAAO,CAAC;AACtB;;AAEA;AACA,OAAO,SAASI,gBAAgB,CAACC,cAAc,EAAE;EAC/C,IAAIA,cAAc,CAACC,SAAS,KAAK,CAAC,EAAE;IAClCT,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAACO,cAAc,CAACE,YAAY,CAAC;EAC9D;AACF;;AAEA;AACA,OAAO,SAASC,gBAAgB,CAACR,OAAO,EAAE;EACxCH,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAACE,OAAO,CAACS,aAAa,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}