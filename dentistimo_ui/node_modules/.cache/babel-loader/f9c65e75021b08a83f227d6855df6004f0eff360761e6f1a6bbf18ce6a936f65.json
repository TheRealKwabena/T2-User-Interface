{"ast":null,"code":"import Paho from 'paho-mqtt';\n\n// Create a client instance\nconst client = new Paho.Client('45bb56160a76417fb2b1bddd91a534ca.s2.eu.hivemq.cloud', Number(8884), \"clientId\");\n\n// called when the client connects\nexport function onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(`Connected successfully.`);\n  client.subscribe(\"appointment/request\");\n}\nexport function publish(topic, message) {\n  const payload = new Paho.Message(message);\n  payload.destinationName = topic;\n  client.send(payload);\n}\n\n// called when the client loses its connection\nexport function onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0) {\n    console.log(\"Connection Lost: \" + responseObject.errorMessage);\n  }\n}\n\n// called when a message arrives\nexport function onMessageArrived(message) {\n  if (message.destinationName === 'appointment/request') {\n    console.log(\"Message Arrived: \" + message.payloadString);\n  } else {\n    console.log(message.payloadString);\n  }\n}\n\n/**\r\n * Reference from PAHO DOCS -->\r\n* client.subscribe(\"World\");\r\n    message = new Paho.MQTT.Message(\"Hello\");\r\n    message.destinationName = \"World\";\r\n    client.send(message);\r\n*/\n\n// connect the client\nexport function connect() {\n  client.onConnectionLost = onConnectionLost;\n  client.onMessageArrived = onMessageArrived;\n  client.connect({\n    useSSL: true,\n    onSuccess: onConnect,\n    userName: 'guskhadad',\n    password: 'D1sSystems!'\n  });\n}","map":{"version":3,"names":["Paho","client","Client","Number","onConnect","console","log","subscribe","publish","topic","message","payload","Message","destinationName","send","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString","connect","useSSL","onSuccess","userName","password"],"sources":["C:/Users/adity/Desktop/SEM'24/DisSystems/T2-UserInterface/dentistimo_ui/src/Infrastructure/PMQTTController.ts"],"sourcesContent":["import Paho from 'paho-mqtt';\r\n\r\n// Create a client instance\r\nconst client = new Paho.Client('45bb56160a76417fb2b1bddd91a534ca.s2.eu.hivemq.cloud', Number(8884), \"clientId\");\r\n    \r\n// called when the client connects\r\nexport function onConnect() {\r\n    // Once a connection has been made, make a subscription and send a message.\r\n    console.log(`Connected successfully.`);\r\n    client.subscribe(\"appointment/request\");\r\n}\r\n\r\nexport function publish(topic: any, message: any) {\r\n    const payload = new Paho.Message(message);\r\n    payload.destinationName = topic;\r\n    client.send(payload);\r\n}\r\n\r\n// called when the client loses its connection\r\nexport function onConnectionLost(responseObject: any) {\r\n    if (responseObject.errorCode !== 0) {\r\n        console.log(\"Connection Lost: \" + responseObject.errorMessage);\r\n    }\r\n}\r\n\r\n// called when a message arrives\r\nexport function onMessageArrived(message: any) {\r\n    if (message.destinationName === 'appointment/request') {\r\n        console.log(\"Message Arrived: \" + message.payloadString);\r\n    } else {\r\n        console.log (message.payloadString)\r\n    }\r\n}\r\n\r\n/**\r\n * Reference from PAHO DOCS -->\r\n* client.subscribe(\"World\");\r\n    message = new Paho.MQTT.Message(\"Hello\");\r\n    message.destinationName = \"World\";\r\n    client.send(message);\r\n*/\r\n\r\n// connect the client\r\nexport function connect() {\r\n    client.onConnectionLost = onConnectionLost;\r\n    client.onMessageArrived = onMessageArrived;\r\n    client.connect({\r\n        useSSL: true,\r\n        onSuccess: onConnect,\r\n        userName: 'guskhadad',\r\n        password: 'D1sSystems!' \r\n    });\r\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;;AAE5B;AACA,MAAMC,MAAM,GAAG,IAAID,IAAI,CAACE,MAAM,CAAC,qDAAqD,EAAEC,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC;;AAE/G;AACA,OAAO,SAASC,SAAS,GAAG;EACxB;EACAC,OAAO,CAACC,GAAG,CAAE,yBAAwB,CAAC;EACtCL,MAAM,CAACM,SAAS,CAAC,qBAAqB,CAAC;AAC3C;AAEA,OAAO,SAASC,OAAO,CAACC,KAAU,EAAEC,OAAY,EAAE;EAC9C,MAAMC,OAAO,GAAG,IAAIX,IAAI,CAACY,OAAO,CAACF,OAAO,CAAC;EACzCC,OAAO,CAACE,eAAe,GAAGJ,KAAK;EAC/BR,MAAM,CAACa,IAAI,CAACH,OAAO,CAAC;AACxB;;AAEA;AACA,OAAO,SAASI,gBAAgB,CAACC,cAAmB,EAAE;EAClD,IAAIA,cAAc,CAACC,SAAS,KAAK,CAAC,EAAE;IAChCZ,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGU,cAAc,CAACE,YAAY,CAAC;EAClE;AACJ;;AAEA;AACA,OAAO,SAASC,gBAAgB,CAACT,OAAY,EAAE;EAC3C,IAAIA,OAAO,CAACG,eAAe,KAAK,qBAAqB,EAAE;IACnDR,OAAO,CAACC,GAAG,CAAC,mBAAmB,GAAGI,OAAO,CAACU,aAAa,CAAC;EAC5D,CAAC,MAAM;IACHf,OAAO,CAACC,GAAG,CAAEI,OAAO,CAACU,aAAa,CAAC;EACvC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,SAASC,OAAO,GAAG;EACtBpB,MAAM,CAACc,gBAAgB,GAAGA,gBAAgB;EAC1Cd,MAAM,CAACkB,gBAAgB,GAAGA,gBAAgB;EAC1ClB,MAAM,CAACoB,OAAO,CAAC;IACXC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAEnB,SAAS;IACpBoB,QAAQ,EAAE,WAAW;IACrBC,QAAQ,EAAE;EACd,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}