[{"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/index.tsx":"1","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/reportWebVitals.ts":"2","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/App.tsx":"3","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/ScrollToTop.ts":"4","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/Infrastructure/PMQTTController.ts":"5","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/MyAppointments/UpcomingAppointments.tsx":"6","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Dentistries/Dentistries.tsx":"7","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/Header.tsx":"8","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Landing/Landing.tsx":"9","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/Login.tsx":"10","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/SignUp.tsx":"11","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/utils/encryptionUtils.ts":"12","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/HeaderElements.ts":"13","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/Regex.ts":"14","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/logo/LogoStyle.ts":"15","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/data/dentistries.tsx":"16","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/GoogleMapsApi/Map.tsx":"17","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/SearchBar/SearchBar.tsx":"18","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/SignOutButton/SignOutButton.tsx":"19","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/LoadingScreen/LoadingScreen.tsx":"20","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/GoogleMapsApi/mapSettings.ts":"21"},{"size":459,"mtime":1672500127304,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1672500127307,"results":"24","hashOfConfig":"23"},{"size":1592,"mtime":1672500294555,"results":"25","hashOfConfig":"23"},{"size":265,"mtime":1672500127294,"results":"26","hashOfConfig":"23"},{"size":6721,"mtime":1672500294555,"results":"27","hashOfConfig":"23"},{"size":8538,"mtime":1672500294558,"results":"28","hashOfConfig":"23"},{"size":11453,"mtime":1672817980967,"results":"29","hashOfConfig":"23"},{"size":3760,"mtime":1672500294556,"results":"30","hashOfConfig":"23"},{"size":565,"mtime":1672500127305,"results":"31","hashOfConfig":"23"},{"size":2567,"mtime":1672500294559,"results":"32","hashOfConfig":"23"},{"size":2685,"mtime":1672500294559,"results":"33","hashOfConfig":"23"},{"size":968,"mtime":1672500294560,"results":"34","hashOfConfig":"23"},{"size":1085,"mtime":1672500294556,"results":"35","hashOfConfig":"23"},{"size":254,"mtime":1672500294559,"results":"36","hashOfConfig":"23"},{"size":180,"mtime":1672500294557,"results":"37","hashOfConfig":"23"},{"size":2594,"mtime":1672500127303,"results":"38","hashOfConfig":"23"},{"size":3534,"mtime":1672820864798,"results":"39","hashOfConfig":"23"},{"size":980,"mtime":1672807657162,"results":"40","hashOfConfig":"23"},{"size":331,"mtime":1672500294558,"results":"41","hashOfConfig":"23"},{"size":497,"mtime":1672500294557,"results":"42","hashOfConfig":"23"},{"size":170,"mtime":1672500127301,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"301nch",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/index.tsx",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/reportWebVitals.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/App.tsx",["118","119"],[],"import { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Landing from './pages/Landing/Landing'\nimport ScrollToTop from './ScrollToTop';\nimport UpcomingAppointments from \"./components/MyAppointments/UpcomingAppointments\";\nimport { useEffect } from \"react\";\nimport { connectMQTT } from \"./Infrastructure/PMQTTController\";\nimport Login from \"./pages/Authentication/Login\";\nimport Dentistries from \"./pages/Dentistries/Dentistries\";\nimport {SignUp} from \"./pages/Authentication/SignUp\"\nconst token = localStorage.getItem('TOKEN');\n\nconst App = () => {\n  \n  useEffect(() => {\n    try {\n      connectMQTT();\n    } catch (e) {\n      console.log('MQTT cannot connect. Please try again.');\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Header/>\n      <ScrollToTop/>\n      <div style={{marginTop: '120px'}}>\n        <Routes>\n          <Route path=\"/appointments\" element={<Dentistries />}></Route>\n          { (token == 'null' || token == undefined) ? \n          <>\n            <Route path=\"/\" element={<Login pageName='Login'/>}></Route>\n            <Route path=\"/signup\" element={<SignUp/>}></Route>\n          </> \n          : \n          <>\n            <Route path=\"/appointments\" element={<Landing pageName={'Home'}/>}></Route>\n            <Route path=\"/\" element={<Landing pageName={'Home'}/>}></Route>\n            <Route path=\"/myslots\" element={<UpcomingAppointments/>}></Route>\n            <Route path=\"/signOut\"/>\n          </>\n          }\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/ScrollToTop.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/Infrastructure/PMQTTController.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/MyAppointments/UpcomingAppointments.tsx",["120"],[],"import React, { useState,useEffect } from 'react';\nimport './MyAppointments.css'\nimport Table from 'react-bootstrap/Table';\nimport {deleteAppointment, editAppointment, getAppointments} from '../../Infrastructure/PMQTTController';\nimport {BsCalendar2Check,BsClock, BsFillGeoAltFill, BsFillTrashFill, BsPencilFill} from \"react-icons/bs\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nfunction UpcomingAppointments() {\n  const [updateModal, setUpdateModal] = useState<any>({\n    isOpen: false,\n    dentistId: '',\n    requestId: '',\n    issuance: '',\n    oldDate: '',\n    date: '',\n    time: ''\n  });\n  const [data, setData] = useState<any[]>([]);\n  const [filterUpcoming, setFilterUpcoming] = useState<boolean>(true);\n  const [deleteModal, setDeleteModal] = useState<any>({\n    isOpen: false,\n    id: '',\n    date: '',\n    time: ''\n  });\n  const id = '2';   //needs to be changed to a userId that is checked by AUTH controller\n  \n  useEffect(() => {\n    setTimeout(() => fetchApps(id), 1000);\n  });\n\n  //gets all appointments\n  const fetchApps = async (dentistId: string) => {\n    await getAppointments(dentistId)\n        .then(response => {\n          setData(response);\n        }).catch ((e) => {\n          console.log(e);\n        });\n  }\n\n  //gets current date and day\n  var currentDate = new Date();\n\n  //sort the appointments\n  data.sort((a, b) => {\n    if (a.date < b.date) {\n      return -1;  \n    } else if (a.date > b.date) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  //maps into the table\n  const tableRows = data.map((value) => {\n    var dateonly = value.date.substring(0,10);\n    var timeonly = value.date.substring(11,16);\n\n    return (\n      <>\n        <Modal show={updateModal.isOpen} onHide={() => setUpdateModal({...updateModal, isOpen: false})}>\n            <form onSubmit={async (e) => {\n                        e.preventDefault()\n                        await editAppointment({\n                            userId: '1274187', \n                            dentistId: updateModal.dentistId, \n                            requestId: updateModal.requestId, \n                            issuance: updateModal.issuance, \n                            date: updateModal.oldDate, \n                            editDate: `${updateModal.date} ${updateModal.time}`\n                        }).then((res) => {\n                          console.log('Edit successful.');\n                          setUpdateModal({...updateModal, isOpen: false, dentistId: '', requestId: '', issuance: '', oldDate: '', date: '', time: ''});\n                        }).catch((e) => {\n                          console.log(e);\n                          setUpdateModal({...updateModal, isOpen: false, dentistId: '', requestId: '', issuance: '', oldDate: '', date: '', time: ''});\n                        })\n                    }}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    You would like to rebook your appointment for ...\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                Current Appointment: &nbsp;\n                <strong>{updateModal.oldDate.substring(0, updateModal.oldDate.length - 3)}</strong><hr/>\n                New Date: <input type=\"date\" id='new-date' required min={`${new Date().toISOString()}`} value={updateModal.date} onChange={(e) => {\n                  setUpdateModal({...updateModal, date: e.target.value});\n                }}/>\n                <br/><br/>\n                New Time: <input type=\"text\" required pattern='^(2[0-3]|[01][0-9]):([03]?[0])$' id='new-time' value={updateModal.time} onChange={(e) => {\n                  setUpdateModal({...updateModal, time: e.target.value});\n                }}/>\n            </Modal.Body>\n            <Modal.Footer>\n                <div id=\"button\" style={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'center'\n                }}>\n                    <Button type='submit' variant='success' size='sm'>Confirm</Button>\n                </div>\n            </Modal.Footer>\n            </form>\n        </Modal>\n        <Modal show={deleteModal.isOpen} backdrop={true} onHide={() => setDeleteModal({...deleteModal, isOpen: false})}>\n            <form onSubmit={async(e) => {\n                        e.preventDefault()\n                        await deleteAppointment({userId: '1274187', dentistId: deleteModal.id, date: `${deleteModal.date} ${deleteModal.time}`}).then(() => {\n                           console.log('Deletion successful.')\n                        }).catch(e => {\n                          console.log(e)\n                          setDeleteModal({...deleteModal, isOpen: false, id: '', date: '', time: ''});\n                        });\n                        setTimeout(() => {\n                          setDeleteModal({...deleteModal, isOpen: false, id: '', date: '', time: ''});\n                          fetchApps(id);\n                        }, 100);\n                    }}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    Are you sure?\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                You are about to delete your made appointment for: <br/><br/>\n                <strong>Date:</strong> {deleteModal.date} &nbsp; <strong>Time:</strong> {deleteModal.time}\n            </Modal.Body>\n            <Modal.Footer>\n                <div id=\"button\" style={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'center'\n                }}>\n                    <Button type='submit' variant='success' size='sm'>Confirm</Button>\n                </div>\n            </Modal.Footer>\n            </form>\n        </Modal>\n            {\n              filterUpcoming ? (new Date(value.date) > currentDate ? \n              (<tr key={value._id}>\n                <td>{dateonly}</td>\n                <td>{timeonly}</td>\n                <td><BsFillTrashFill type=\"button\" onClick={() => {\n                  setDeleteModal({...deleteModal, isOpen: true, id: value.dentistId, date: dateonly, time: timeonly});\n                }}/></td> \n                <td><BsPencilFill type=\"button\" onClick={() => {\n                  setUpdateModal({...updateModal, isOpen: true, dentistId: value.dentistId, requestId: value.requestId, issuance: value.issuance, oldDate: value.date.toString()});\n                  fetchApps(id);\n                }}/></td>      \n              </tr>) : (<></>)) \n              : \n              (<tr key={value._id}>\n                <td>{dateonly}</td>\n                <td>{timeonly}</td>\n                <td><BsFillTrashFill type=\"button\" onClick={async () => {\n                  setDeleteModal({...deleteModal, isOpen: true, id: value.dentistId, date: dateonly, time: timeonly});\n                  fetchApps(id);\n                }}/></td> \n                <td><BsPencilFill type=\"button\" onClick={() => {\n                  setUpdateModal({...updateModal, isOpen: true, dentistId: value.dentistId, requestId: value.requestId, issuance: value.issuance, oldDate: value.date.toString()});\n                  fetchApps(id);\n                }}/></td>      \n                </tr>)\n            }\n      </>\n  )});\n\n  return (\n    <React.Fragment>\n        <div className=\"contain\">\n          <div className='child'>\n          <br></br>\n            <h1>{filterUpcoming ? 'Upcoming appointments' : 'All Appointments'}</h1>\n            <div className='upcoming-table'>\n              <br/>\n              <Table hover className='table-up'>\n                <thead>\n                  <button type=\"submit\" onClick={() => {\n                      fetchApps(id);\n                      setFilterUpcoming(!filterUpcoming);  \n                    }\n                  }>{filterUpcoming ? 'Show all appointments' : 'Filter Upcoming Appointments'}</button>\n                  <br></br>\n                  <tr>\n                    <th><BsCalendar2Check></BsCalendar2Check><span style={{padding: '0px 10px 0px 10px'}}>Date</span></th>\n                    <th><BsClock></BsClock><span style={{padding: '0px 10px 0px 10px'}}>Time</span></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {tableRows}\n                </tbody>\n              </Table>\n            </div>\n          </div>\n        </div>\n    </React.Fragment>\n  );\n}\n\nexport default UpcomingAppointments;\n","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Dentistries/Dentistries.tsx",["121","122","123","124","125"],[],"import React, {useEffect, useState} from 'react';\nimport './Dentistries.css';\nimport Map, { DentistryType } from '../../components/GoogleMapsApi/Map';\nimport { dentistries } from '../../data/dentistries';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Typography from '@mui/material/Typography';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport FullCalendar, { DateSelectArg, EventClickArg } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {getAppointments, deleteAppointment, publish} from '../../Infrastructure/PMQTTController';\nimport { ClickAwayListenerProps } from '@mui/material';\n\ninterface IFetchedSlot {\n    id?: string | undefined;\n    title?: string;\n    start: Date | string;\n    end: Date | string;\n    display: string;\n    color: string;\n}\n\ninterface IAppInfo {\n    slot: DateSelectArg | undefined;\n    id: string | undefined;\n}\n\nconst Dentistries: React.FC = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n    const [bookingConfirmed, setBookingConfirmed] = useState(true);\n    const [appointmentInfo, setAppointmentInfo] = useState<IAppInfo>({slot: undefined, id: undefined});\n    const [eventTitle, setEventTitle] = useState<string>('');\n    const [id, setId] = useState<string>('');\n    \n    useEffect(() => {\n        try {\n            console.log(Math.ceil(Math.random()*10000000));\n        } catch (e) {\n            console.log('---');\n        }\n    }, []);\n\n    const createAppointment = (selectInfo: IAppInfo) => {\n        if (selectInfo.slot !== undefined && selectInfo.id !== undefined) {\n            const onSlotSelect = selectInfo.slot.view.calendar\n            if (bookingConfirmed) {\n                let desiredEvent = {\n                    userId: '1274187', //authentication should add it in \n                    requestId: '10',   //to be replaced by guid\n                    dentistId: selectInfo.id,    //to be replaced by fetching dentistry info\n                    issuance: Math.floor((Math.random() * 100) + 1).toString(),\n                    date: selectInfo.slot.startStr\n                };\n                publish('appointment/request', JSON.stringify(desiredEvent));\n                onSlotSelect.refetchEvents();\n            } else {\n                console.log('Nothing selected.')\n            }\n        }\n    }\n\n    const fetchSlots = async (id: string) : Promise<any[]> => {\n            let list : IFetchedSlot[] = [];\n            await getAppointments(id)\n            .then((val) => {\n                list = val.map((value) => {\n                    const startDate = new Date(value.date.toString());\n                    const endDate = new Date(startDate.getTime() + 30*60000);\n                    return {\n                        title: 'Appointment',\n                        start: startDate.toISOString(),\n                        end: endDate.toISOString(),\n                        display: /*value.userId === userId ? block :*/ 'background', // userId is a to-be useState var obtained once auth module works\n                        color: 'grey'\n                    }\n                });\n                console.log(list);\n            }).catch((e) => {\n                console.log(e);\n            })\n            //console.log(list);\n            return list;\n    }\n    \n    return (\n            <div className='card'>\n                <div className='title'>\n                    Our Dentistries\n                </div>\n                    <Map/>\n                    <div className='dentistry_container'>\n                        <Modal show={modalOpen} onHide={() => setModalOpen(false)}>\n                            <form onSubmit={(e) => {\n                                        e.preventDefault()\n                                        console.log(bookingConfirmed)\n                                        setBookingConfirmed(true)\n                                        createAppointment(appointmentInfo)\n                                        setEventTitle('')\n                                        setTimeout(() => {\n                                            setModalOpen(false);\n                                        }, 200);\n                                    }}>\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    Book Appointment\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>\n                                {/*Please mention the times. \n                                (Need to add input boxes, one is disabled, that is 30mins + start).*/}\n                                Name: <input type=\"text\" name=\"Name\" id=\"\" required placeholder='Name' value={eventTitle} onChange={(e) => {\n                                    setEventTitle(e.target.value)\n                                }}/>\n                                <br></br><br></br>\n                                Start Time: <input type=\"time\" name=\"StartTime\" id='start-time' /*onChange={}*//>\n                                End Time: <input type=\"time\" name=\"EndTime\" id='end-time' /*onChange={}*//>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <div id=\"button\" style={{\n                                    width: '100%',\n                                    display: 'flex',\n                                    justifyContent: 'center'\n                                }}>\n                                    <Button type='submit' variant='success' size='sm'>Confirm Appointment</Button>\n                                </div>\n                            </Modal.Footer>\n                            </form>\n                        </Modal>\n                        {\n                            dentistries.map((dentistry: any, index: number) => (\n                                <Accordion id='accordion' TransitionProps={{ \n                                    unmountOnExit: true, \n                                }} onChange={() => setId(dentistry.id)}>\n                                    <AccordionSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                        aria-controls=\"panel1a-content\"\n                                        id=\"panel1a-header\">\n                                    <p className='name'> Name: {dentistry.name}</p>\n                                    <p className='address'> Address: {dentistry.address}</p>\n                                    <p className='dentists'> Dentists: {dentistry.dentists}</p>\n                                    <p className=\"id\">ID: {dentistry.id}</p>\n                                    </AccordionSummary>\n                                    <AccordionDetails>\n                                    <Typography>\n                                            \n                                    <FullCalendar\n                                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                                        headerToolbar={{\n                                            left: 'prev,next today',\n                                            center: 'title',\n                                            right: 'timeGridWeek,timeGridDay'\n                                        }}\n                                        dateClick={() => createAppointment}\n                                        initialEvents={[]}\n                                        loading={(isLoading) => {\n                                            if (isLoading) {\n                                                console.log('Loading .........')\n                                            } else {\n                                                console.log('Done!');\n                                            }\n                                        }}\n                                        initialView='timeGridWeek'\n                                        selectable={true}\n                                        selectMirror={true}\n                                        editable={true}\n                                        eventClick={async (eventInfo) => {\n                                            //more info about event maybe...\n                                        }}\n                                        dayMaxEvents={true}\n                                        select={(info) => {\n                                            setAppointmentInfo({...appointmentInfo, slot: info, id: dentistry.id})\n                                            setModalOpen(true)\n                                            info.view.calendar.refetchEvents();\n                                        }}\n                                        selectConstraint={'businessHours'}\n                                        eventOverlap={false}\n                                        allDaySlot={false}\n                                        slotMinTime={'06:00:00'}\n                                        weekends={false}\n                                        defaultTimedEventDuration={'00:30'}\n                                        selectAllow={(info) => {\n                                            if ((info.start > new Date()) && (info.end.getTime() - info.start.getTime() <= (30 * 60 * 1000))) {\n                                                return true\n                                            } else {\n                                                return false\n                                            }\n                                        }}\n                                        forceEventDuration={true}\n                                        lazyFetching={false}\n                                        events={async () => await fetchSlots(id)}\n                                        selectOverlap={(event) => {\n                                            return event.display === 'inverse-background';\n                                        }}\n                                        businessHours={\n                                            Object.keys(dentistry.openinghours).map((day, index) => (\n                                            {\n                                                daysOfWeek: [index+1],\n                                                startTime: (dentistry.openinghours[day].split('-'))[0],\n                                                endTime: (dentistry.openinghours[day].split('-'))[1],\n                                                display: 'inverse-background'\n                                            }\n                                        ))}\n                                    /> \n                                    </Typography>\n                                    </AccordionDetails>\n                                </Accordion>\n                            ))} \n                    </div>\n            </div>\n    )\n\n}\n\n\n\nexport default Dentistries;",[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/Header.tsx",["126","127","128","129"],[],"import {useState} from 'react'\nimport { Nav, NavbarContainer, LogoContainer, PagesContainer, LinkContainer } from './HeaderElements';\nimport { Logo } from './logo/LogoStyle';\nimport {Link} from 'react-scroll';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {Drawer, IconButton, List, ListItemButton, ListItemIcon, ListItemText, useMediaQuery} from '@mui/material';\nimport '../styles.css';\nimport SignOutButton from '../SignOutButton/SignOutButton';\n\nexport interface IHeaderProps {}\n\nconst Header: React.FunctionComponent<IHeaderProps> = (props: IHeaderProps) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState<boolean>(false);\n  const reduced = useMediaQuery('(max-width: 690px)');\n  const token = localStorage.getItem('TOKEN');\n\n  return (\n    <Nav>\n      {token == null || token == undefined ?\n          <LogoContainer to='/'>\n            <img style={{width: 100}} src={require(\"./logo/image.png\")} />\n          </LogoContainer>\n        :\n        <>\n          {!reduced ? \n            <>\n              <LogoContainer to='/'>\n              <Logo src={require(\"./logo/image.png\")} />\n            </LogoContainer>\n            <PagesContainer>\n            <Link to='appointments' smooth={true} offset={-110} duration={900}>\n              <LinkContainer to={`/`}>\n              <a>Appointments</a>\n              </LinkContainer>\n            </Link>\n            <Link to='dentistries' smooth={true} offset={-110} duration={900}>\n              <LinkContainer to={`/`}>\n                <a>Dentistries</a>\n              </LinkContainer>\n            </Link>\n            <Link to='appointments2' smooth={true} offset={-110} duration={900}>\n              <LinkContainer to={'/myslots'}>\n                MyBookings\n              </LinkContainer>\n            </Link>\n            <LinkContainer to={`/`}><SignOutButton /></LinkContainer>\n            </PagesContainer>\n            </>\n           : \n            <NavbarContainer>\n              <div id='hamburger'>\n                <IconButton sx={{color: 'white'}} hidden={true} onClick={() => setIsDrawerOpen(!isDrawerOpen)}>\n                    <MenuIcon/>\n                </IconButton>\n              </div>\n              <Drawer open={isDrawerOpen} onClose={() => setIsDrawerOpen(false)} anchor={'top'} sx={{\n                backgroundColor: 'rgba(0, 100, 100, 0.5)'\n              }}>\n                <List>\n                  <ListItemIcon>\n                    <ListItemText>\n                    </ListItemText>\n                  </ListItemIcon>\n                  <Link to='appointments' smooth={true} offset={-110} duration={900}>\n                  <ListItemButton>\n                    <ListItemIcon>\n                      <ListItemText>\n                          Appointments\n                      </ListItemText>\n                    </ListItemIcon>\n                    </ListItemButton>\n                  </Link>\n                  <Link to='dentistries' smooth={true} offset={-110} duration={900}>\n                  <ListItemButton>\n                    <ListItemIcon>\n                      <ListItemText>\n                          Dentistries\n                      </ListItemText>\n                    </ListItemIcon>\n                  </ListItemButton>\n                  </Link>\n                  <Link to='appointments2' smooth={true} offset={-110} duration={900}>\n                  <ListItemButton>\n                    <ListItemIcon>\n                      <ListItemText>\n                          MyBookings\n                      </ListItemText>\n                    </ListItemIcon>\n                  </ListItemButton>\n                  </Link>\n                </List>\n              </Drawer>\n            </NavbarContainer>}\n        </>\n        }\n        \n      </Nav>    \n  )\n}\n\nexport default Header;\n","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Landing/Landing.tsx",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/Login.tsx",["130","131"],[],"import React, { useEffect, useState } from 'react'\nimport \"./Login.css\";\nimport { connectMQTT, publish, getJWT } from '../../Infrastructure/PMQTTController';\nimport { encrypt, decrypt } from \"../../utils/encryptionUtils\";\nimport LoadingScreen from '../../components/LoadingScreen/LoadingScreen';\nimport { User } from './UserType';\nimport { useForm } from 'react-hook-form';\nimport { EMAIL_REGEX, PASSWORD_REGEX } from './Regex';\ninterface LoginPageProps {\n  pageName: string;\n  user?: {\n    email: string, \n    password: string\n  };\n}\n\nconst Login = (props: LoginPageProps) => {\n  const [onLoad, setOnLoad] = useState(false);\n  const SIGN_IN_REQUEST_TOPIC = 'authentication/signIn/request';\n  const { register, handleSubmit, formState: { errors } } = useForm<User>();\n  \n  useEffect(() => { document.title = `${props.pageName} ⋅ Dentistimo` });\n  \n  useEffect(() => {\n    try {\n        connectMQTT();\n    } catch (e) {\n        console.log(e);\n    }\n  })\n\n  const logIn = async (user: User) => {\n    try {\n      const encrypted_user = encrypt(user);\n      publish(SIGN_IN_REQUEST_TOPIC, encrypted_user.toString());\n      localStorage.clear();\n      getJWT();\n      if (localStorage.getItem('TOKEN') == null || localStorage.getItem('TOKEN') == undefined) {\n        setOnLoad(true);\n      } else {\n        setOnLoad(false);\n      }\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <form className=\"login-form\" onSubmit={handleSubmit(logIn)}>\n        <div className=\"wrapper\">\n        <header>Log in</header>\n        <div>\n        <input\n          className=\"email\"\n          type=\"text\"\n          placeholder=\"Enter your email\"\n          {...register(\"email\", { required: true, pattern: EMAIL_REGEX})} />\n          {errors.email && <div className='form-value'>Please enter a valid email</div>}\n        </div>\n\n        <input\n          className=\"password\"\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          {...register(\"password\", { required: true, pattern: PASSWORD_REGEX })} />\n          {errors.email && <div className='form-value'>Please enter a valid password</div>}\n            <div className=\"pass-txt\">\n            <a href=\"./SignUp\">\n              Don't have an account? Sign Up. \n              </a>\n            </div>\n            <button value=\"Login\" type=\"submit\"> Log in</button>\n              <div id='loading-screen' style={onLoad ? { display: 'contents'} : {display: 'none'}}>\n                  <LoadingScreen />\n              </div>\n          </div>\n      </form>\n    ) \n}\n\nexport default Login;","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/SignUp.tsx",["132","133","134"],[],"// code reference: https://www.freecodecamp.org/news/add-form-validation-in-react-app-with-react-hook-form/\nimport { useState, useEffect } from \"react\";\nimport { useForm } from 'react-hook-form';\nimport \"./SignUp.css\"\nimport { publish, connectMQTT } from '../../Infrastructure/PMQTTController';\nimport { encrypt, decrypt } from \"../../utils/encryptionUtils\";\nimport { User } from './UserType';\nimport { EMAIL_REGEX, PASSWORD_REGEX } from \"./Regex\";\n\nexport function SignUp(){\n    const SIGN_UP_REQUEST_TOPIC = 'authentication/signUp/request';\n    const SIGN_UP_RESPONSE_TOPIC = 'authentication/signUp/response';\n    const { register, handleSubmit, formState: { errors } } = useForm<User>();\n  \n    useEffect(() => {\n      try {\n          connectMQTT();\n      } catch (e) {\n          console.log(e);\n      }\n  })\n\n  const createUser = async (user: User) => {\n    try {\n      const encrypted_user = encrypt(user);\n      publish(SIGN_UP_REQUEST_TOPIC, encrypted_user.toString());\n      alert('User created sucessfully');\n      window.location.assign('/');\n    } catch (error) {\n      console.log(error);\n    }\n    }\n  \n    return (\n    <form className=\"SignUp-form\" onSubmit={handleSubmit(createUser)}>\n      <div className=\"wrapper\">\n        <header id =\"header\">Sign up</header>\n     \n          <input\n              id=\"name\"\n              type='text'\n              placeholder=\"Enter your full name\"\n              {...register(\"name\", { required: true, minLength: 3, maxLength: 40 })} />\n              {errors.name && <div className=\"form-value\">Name is required</div>}\n        \n       \n          <input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              {...register(\"email\", { required: true, pattern: EMAIL_REGEX })} />\n              {errors.email && <div className=\"form-value\">Email is required and must follow the example@domain.com template</div>}\n       \n       \n          <input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n            //the password should include capital letters and lowercase letters. From 8 to 30 characters\n              {...register(\"password\", { required: true, minLength: 8, pattern: PASSWORD_REGEX })} />\n              {errors.password && <div className=\"form-value\">Password is required and should be more than 8 characters. It Should include at least one Capital letter, lowercase letter and a number</div>}\n       \n        <div className=\"pass-txt\">\n          <a href=\"./\">Already have an account? click here</a>\n        </div>\n        <button type=\"submit\" value=\"Sign up\" > Sign Up </button>\n      </div>\n    </form>\n    )\n}","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/utils/encryptionUtils.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/HeaderElements.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/pages/Authentication/Regex.ts",["135","136"],[],"export const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\nexport const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30}$/;","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/Header/logo/LogoStyle.ts",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/data/dentistries.tsx",["137"],[],"import { EventInput } from \"@fullcalendar/react\"\n\n\n export const dentistries = [\n      {\n        \"id\": '1',\n        \"name\": \"Your Dentist\",\n        \"owner\": \"Dan Tist\",\n        \"dentists\": 3,\n        \"address\": \"Spannmålsgatan 20\",\n        \"city\": \"Gothenburg\",\n        \"coordinate\": {\n          \"lng\": 11.969388,\n          \"lat\": 57.707619\n        },\n        \"openinghours\": {\n          \"monday\": \"9:00-17:00\",\n          \"tuesday\": \"8:00-17:00\",\n          \"wednesday\": \"7:00-16:00\",\n          \"thursday\": \"9:00-17:00\",\n          \"friday\": \"9:00-15:00\"\n        },\n        \"appointments\": [\n          {\n            \"id\": '0',\n            \"title\": 'Unavailable',\n            \"start\": new Date(2022, 11, 1),\n            \"end\": new Date(2022, 11, 2),\n            \"display\": \"background\",\n            \"selectable\": false,\n            \"color\": 'red'\n          }\n        ]\n      },\n      {\n        \"id\": '2',\n        \"name\": \"Tooth Fairy Dentist\",\n        \"owner\": \"Tooth Fairy\",\n        \"dentists\": 1,\n        \"address\": \"Slottskogen\",\n        \"city\": \"Gothenburg\",\n        \"coordinate\": {\n          \"lng\": 11.942625,\n          \"lat\": 57.685255\n        },\n        \"openinghours\": {\n          \"monday\": \"7:00-19:00\",\n          \"tuesday\": \"7:00-19:00\",\n          \"wednesday\": \"7:00-19:00\",\n          \"thursday\": \"7:00-19:00\",\n          \"friday\": \"7:00-19:00\"\n        },\n        \"appointments\": [\n          {\n            \"id\": '0',\n            \"title\": 'Appointment',\n            \"start\": new Date(2022, 11, 3, 18, 30, 0),\n            \"end\": new Date(2022, 11, 3, 19, 0, 0)\n          }\n        ]\n      },\n      {\n        \"id\": '3',\n        \"name\": \"The Crown\",\n        \"owner\": \"Carmen Corona\",\n        \"dentists\": 2,\n        \"address\": \"Lindholmsallén 19\",\n        \"city\": \"Gothenburg\",\n        \"coordinate\": {\n          \"lng\": 11.940386,\n          \"lat\": 57.709872\n        },\n        \"openinghours\": {\n          \"monday\": \"6:00-15:00\",\n          \"tuesday\": \"8:00-17:00\",\n          \"wednesday\": \"7:00-12:00\",\n          \"thursday\": \"7:00-17:00\",\n          \"friday\": \"8:00-16:00\"\n        }\n      },\n      {\n        \"id\": '4',\n        \"name\": \"Lisebergs Dentists\",\n        \"owner\": \"Glen Hysén\",\n        \"dentists\": 3,\n        \"address\": \"Liseberg\",\n        \"city\": \"Gothenburg\",\n        \"coordinate\": {\n          \"lng\": 11.991153,\n          \"lat\": 57.694723\n        },\n        \"openinghours\": {\n          \"monday\": \"10:00-18:00\",\n          \"tuesday\": \"10:00-18:00\",\n          \"wednesday\": \"10:00-18:00\",\n          \"thursday\": \"10:00-18:00\",\n          \"friday\": \"10:00-18:00\"\n        }\n      }\n    ]\n  ","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/GoogleMapsApi/Map.tsx",["138"],[],"import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  Marker,\n  InfoWindow,\n  useLoadScript\n} from \"@react-google-maps/api\";\nimport './SearchBar.css';\nimport { Stack, Autocomplete, TextField } from '@mui/material';\nimport { container, locationOnLoad } from \"./mapSettings\";\nimport { dentistries } from '../../data/dentistries';\n\nexport type DentistryType = {\n    name: string,\n    coordinate: google.maps.LatLngLiteral,\n    address: string\n}\n\nconst Map = () => {\n    const [searchResult, setResult] = useState<string | null> (null) \n    \n    const dentistriesList: string[] = dentistries.map((dentistry, index) => {return dentistry.name});\n\n    const [clickedDentistry, setClickedDentistry] = React.useState<DentistryType>({} as DentistryType);\n\n    const selectedDentistry = dentistries.find(e => e.name === searchResult)\n\n    const onClicked = (dentistry: DentistryType) => {\n        setClickedDentistry(dentistry);\n    }\n\n    const { isLoaded } = useLoadScript({\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY!\n    });\n\n    const mapReference = React.useRef<google.maps.Map | null>(null);\n\n    const onLoad = (map: google.maps.Map): void => {\n        mapReference.current = map;\n    };\n\n    const onUnMount = (): void => {\n        mapReference.current = null;\n    };\n\n    if (!isLoaded) return <div>Loading</div>;\n    return (\n        <div>\n            <div className='search_bar_container'>\n                <Stack id='search-bar' spacing= {2}>\n                    <Autocomplete\n                    disablePortal\n                    id=\"combo-box\"\n                    sx={{ width: 600 , borderRadius: '10px'}}\n                    options={dentistriesList}\n                    renderInput={(params) => <TextField {...params} label='Search by name or location'/>}\n                    value={searchResult}\n                    onChange={(event: any, newValue: string | null) => setResult(newValue)}\n                    freeSolo\n                    /> \n                </Stack>\n            </div>\n\n        <GoogleMap\n            mapContainerStyle={container}\n            center={locationOnLoad}\n            onUnmount={onUnMount}\n            zoom={11}\n        >\n\n        {\n            selectedDentistry?.coordinate && \n            (\n                <InfoWindow\n                position={selectedDentistry.coordinate}\n                onCloseClick={() => setClickedDentistry({} as DentistryType)}  \n                >\n                <>\n                <p>Name: {selectedDentistry.name}</p> \n                <p>Address: {selectedDentistry.address}</p>            \n                </>         \n                </InfoWindow>\n            )\n        }   \n\n        {\n            dentistries.map(dentistry => {\n              return (\n                  <Marker\n                      key={dentistry.name}\n                      position={dentistry.coordinate}\n                      onClick={() => { onClicked(dentistry) }}\n                  />\n              )\n            })\n        }\n        {\n            clickedDentistry.coordinate && \n            (\n                <InfoWindow\n                position={clickedDentistry.coordinate}\n                onCloseClick={() => setClickedDentistry({} as DentistryType)}  \n                >\n                <>\n                <p>Name: {clickedDentistry.name}</p> \n                <p>Address: {clickedDentistry.address}</p>            \n                </>         \n                </InfoWindow>\n            )\n        }\n        </GoogleMap>\n        </div>\n  );\n};\n\n\nexport default Map;\n","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/SearchBar/SearchBar.tsx",["139","140"],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/SignOutButton/SignOutButton.tsx",[],[],"/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/LoadingScreen/LoadingScreen.tsx",["141"],[],"// code source: https://github.com/agneym/react-loading\nimport React from 'react';\nimport { LoaderProvider, useLoading, Oval } from \"@agney/react-loading\";\nimport './LoadingScreen.css';\n\nconst LoadingScreen: React.FC = () => {\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        indicator: <Oval />\n      });\n\nreturn (\n    <div id='loading-screen'>\n    <section {...containerProps}>\n      {indicatorEl}\n    </section>\n  </div>\n)\n}\n\nexport default LoadingScreen;","/Users/andreeafulger/T2-UserInterface/dentistimo_ui/src/components/GoogleMapsApi/mapSettings.ts",[],[],{"ruleId":"142","severity":1,"message":"143","line":30,"column":20,"nodeType":"144","messageId":"145","endLine":30,"endColumn":22},{"ruleId":"142","severity":1,"message":"143","line":30,"column":39,"nodeType":"144","messageId":"145","endLine":30,"endColumn":41},{"ruleId":"146","severity":1,"message":"147","line":5,"column":35,"nodeType":"148","messageId":"149","endLine":5,"endColumn":51},{"ruleId":"146","severity":1,"message":"150","line":3,"column":15,"nodeType":"148","messageId":"149","endLine":3,"endColumn":28},{"ruleId":"146","severity":1,"message":"151","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":17},{"ruleId":"146","severity":1,"message":"152","line":11,"column":39,"nodeType":"148","messageId":"149","endLine":11,"endColumn":52},{"ruleId":"146","severity":1,"message":"153","line":18,"column":26,"nodeType":"148","messageId":"149","endLine":18,"endColumn":43},{"ruleId":"146","severity":1,"message":"154","line":19,"column":10,"nodeType":"148","messageId":"149","endLine":19,"endColumn":32},{"ruleId":"142","severity":1,"message":"143","line":19,"column":31,"nodeType":"144","messageId":"145","endLine":19,"endColumn":33},{"ruleId":"155","severity":1,"message":"156","line":21,"column":13,"nodeType":"157","endLine":21,"endColumn":75},{"ruleId":"158","severity":1,"message":"159","line":33,"column":15,"nodeType":"157","endLine":33,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":38,"column":17,"nodeType":"157","endLine":38,"endColumn":20},{"ruleId":"146","severity":1,"message":"160","line":4,"column":19,"nodeType":"148","messageId":"149","endLine":4,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":38,"column":82,"nodeType":"144","messageId":"145","endLine":38,"endColumn":84},{"ruleId":"146","severity":1,"message":"161","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":18},{"ruleId":"146","severity":1,"message":"160","line":6,"column":19,"nodeType":"148","messageId":"149","endLine":6,"endColumn":26},{"ruleId":"146","severity":1,"message":"162","line":12,"column":11,"nodeType":"148","messageId":"149","endLine":12,"endColumn":33},{"ruleId":"163","severity":1,"message":"164","line":1,"column":38,"nodeType":"165","messageId":"166","endLine":1,"endColumn":39,"suggestions":"167"},{"ruleId":"163","severity":1,"message":"164","line":1,"column":63,"nodeType":"165","messageId":"166","endLine":1,"endColumn":64,"suggestions":"168"},{"ruleId":"146","severity":1,"message":"169","line":1,"column":10,"nodeType":"148","messageId":"149","endLine":1,"endColumn":20},{"ruleId":"146","severity":1,"message":"170","line":38,"column":11,"nodeType":"148","messageId":"149","endLine":38,"endColumn":17},{"ruleId":"146","severity":1,"message":"171","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":11},{"ruleId":"146","severity":1,"message":"150","line":5,"column":15,"nodeType":"148","messageId":"149","endLine":5,"endColumn":28},{"ruleId":"146","severity":1,"message":"172","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":24},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'BsFillGeoAltFill' is defined but never used.","Identifier","unusedVar","'DentistryType' is defined but never used.","'SearchBar' is defined but never used.","'EventClickArg' is defined but never used.","'deleteAppointment' is defined but never used.","'ClickAwayListenerProps' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'decrypt' is defined but never used.","'useState' is defined but never used.","'SIGN_UP_RESPONSE_TOPIC' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["173","174"],["175","176"],"'EventInput' is defined but never used.","'onLoad' is assigned a value but never used.","'Map' is defined but never used.","'LoaderProvider' is defined but never used.",{"messageId":"177","fix":"178","desc":"179"},{"messageId":"180","fix":"181","desc":"182"},{"messageId":"177","fix":"183","desc":"179"},{"messageId":"180","fix":"184","desc":"182"},"removeEscape",{"range":"185","text":"186"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"187","text":"188"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"189","text":"186"},{"range":"190","text":"188"},[37,38],"",[37,37],"\\",[62,63],[62,62]]